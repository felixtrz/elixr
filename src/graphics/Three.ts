import { BufferGeometry, Mesh } from 'three';
import {
	acceleratedRaycast,
	computeBoundsTree,
	disposeBoundsTree,
} from 'three-mesh-bvh';

BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;
BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;
Mesh.prototype.raycast = acceleratedRaycast;

// extract exports from three using the following snippet:
// const threeExports = '<exports go here>';
// const regex = /export\s*{\s*([^}]+)\s*}\s*from/g;
// const matches = [...threeExports.matchAll(regex)];
// const extractedParts = matches.map((match) => match[1].trim());
// const combinedExport = `export { ${extractedParts.join(', ')} } from 'three';`;
// console.log(combinedExport);
export {
	WebGLArrayRenderTarget,
	WebGL3DRenderTarget,
	WebGLMultipleRenderTargets,
	WebGLCubeRenderTarget,
	WebGLRenderTarget,
	WebGLRenderer,
	WebGL1Renderer,
	ShaderLib,
	UniformsLib,
	UniformsUtils,
	ShaderChunk,
	FogExp2,
	Fog,
	Scene,
	Sprite,
	LOD,
	SkinnedMesh,
	Skeleton,
	Bone,
	Mesh,
	InstancedMesh,
	BatchedMesh,
	LineSegments,
	LineLoop,
	Line,
	Points,
	Group,
	VideoTexture,
	FramebufferTexture,
	Source,
	DataTexture,
	DataArrayTexture,
	Data3DTexture,
	CompressedTexture,
	CompressedArrayTexture,
	CompressedCubeTexture,
	CubeTexture,
	CanvasTexture,
	DepthTexture,
	Texture,
	AnimationLoader,
	CompressedTextureLoader,
	CubeTextureLoader,
	DataTextureLoader,
	TextureLoader,
	ObjectLoader,
	MaterialLoader,
	BufferGeometryLoader,
	DefaultLoadingManager,
	LoadingManager,
	ImageLoader,
	ImageBitmapLoader,
	FileLoader,
	Loader,
	LoaderUtils,
	Cache,
	AudioLoader,
	SpotLight,
	PointLight,
	RectAreaLight,
	HemisphereLight,
	DirectionalLight,
	AmbientLight,
	Light,
	LightProbe,
	StereoCamera,
	PerspectiveCamera,
	OrthographicCamera,
	CubeCamera,
	ArrayCamera,
	Camera,
	AudioListener,
	PositionalAudio,
	AudioContext,
	AudioAnalyser,
	Audio,
	VectorKeyframeTrack,
	StringKeyframeTrack,
	QuaternionKeyframeTrack,
	NumberKeyframeTrack,
	ColorKeyframeTrack,
	BooleanKeyframeTrack,
	PropertyMixer,
	PropertyBinding,
	KeyframeTrack,
	AnimationUtils,
	AnimationObjectGroup,
	AnimationMixer,
	AnimationClip,
	AnimationAction,
	RenderTarget,
	Uniform,
	UniformsGroup,
	InstancedBufferGeometry,
	BufferGeometry,
	InterleavedBufferAttribute,
	InstancedInterleavedBuffer,
	InterleavedBuffer,
	InstancedBufferAttribute,
	GLBufferAttribute,
	Object3D,
	Raycaster,
	Layers,
	EventDispatcher,
	Clock,
	QuaternionLinearInterpolant,
	LinearInterpolant,
	DiscreteInterpolant,
	CubicInterpolant,
	Interpolant,
	Triangle,
	MathUtils,
	Spherical,
	Cylindrical,
	Plane,
	Frustum,
	Sphere,
	Ray,
	Matrix4,
	Matrix3,
	Box3,
	Box2,
	Line3,
	Euler,
	Vector4,
	Vector3,
	Vector2,
	Quaternion,
	Color,
	ColorManagement,
	SphericalHarmonics3,
	SpotLightHelper,
	SkeletonHelper,
	PointLightHelper,
	HemisphereLightHelper,
	GridHelper,
	PolarGridHelper,
	DirectionalLightHelper,
	CameraHelper,
	BoxHelper,
	Box3Helper,
	PlaneHelper,
	ArrowHelper,
	AxesHelper,
	Shape,
	Path,
	ShapePath,
	CurvePath,
	Curve,
	DataUtils,
	ImageUtils,
	ShapeUtils,
	PMREMGenerator,
	WebGLUtils,
	createCanvasElement,
} from 'three';

export * from 'three/src/geometries/Geometries.js';
export * from 'three/src/materials/Materials.js';
export * from 'three/src/core/BufferAttribute.js';
export * from 'three/src/extras/curves/Curves.js';
export * from 'three/src/constants.js';

export * as THREE from 'three';
